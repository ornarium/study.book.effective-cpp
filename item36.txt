item36. 인터페이스 계승과 구현 계승의 차이점을 이해하라.

public계승의 개념은 함수 인터페이스 계승, 함수 구현의 계승 2가지. 
함수선언과 함수 정의간의 차이점과 정확히 일치함.

1. 멤버함수의 인터페이스(선언)만 계승
- 계승된 클래스가 함수의 인터페이스만 계승하도록 순수 가상함수를 선언.
- 베이스 클래스에는 순수가상함수의 정의가 없는 것이 전형적
- 순수 가상함수에 기본 정의를 구현할수도 있으나, 호출시에는 trick을
씀.
Shape * ps = new Shape; //에러
Shape * ps1 = new Rectangle;
ps1->draw(); //Rectangle::draw호출
ps1->Shape::draw(); //Shape::draw 호출

2. 인터페이스, 구현(정의)를 계승(구현은 재정의가능)
- 계승된 클래스가 구현을 재정의하거나, 그대로 쓰도록 단순 가상함수
선언.

3. 인터페이스, 구현(정의)를 계승(구현은 재정의불가능)
- 구현도 의무적으로 계승하도록(재정의 불가능) 비가상함수로 구현.

※ 미숙한 소프트웨어 설계자들이 자주 저지르는 실수 2가지
1. 모든 함수를 비가상 함수로 선언.
- 계승된 클래스에서는 구현상 바꿀것이 전혀 없게 되는 장점.
- 베이스 클래스 사용시에는 소멸자로 인한 문제 발생(항목 14)
- 가상/비가상 함수에 대한 무지와 가상함수의 성능상 터무니없는 미신의
결과로 설계되는 경우 많음(베이스 클래스는 반드시 가상함수를 갖음에도..)

2. 모든 함수를 가상 함수로 선언.
- 프로토콜 클래스에 있어, 어떤 경우엔 적절한 방식.
- 클래스 설계자가 버티고 설 든든한 버팀목이 없다는 것을 나타내기도 함.
(어떤 함수들은 절대 재정의 되지 않아야 함으로)
