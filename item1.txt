item1. #define보다는 const와 inline을 사용한다
두가지 특별한 경우 존재
1. 상수 포인터를 정의하기가 다소 까다로울수가 있다
헤더 파일내에서 const char * 스트링을 선언하려면 const를 두번 써야
한다
const char * const authorName = "Soctt Meyers";

2. 클래스 범위의 상수를 정의하는 것이 편리할 때가 있으며 이것은 조금
다른 방법을 필요로 함
-> 상수의 영역을 클래스로 제한하기 위해서는 멤버로 만들어야 하며,
상수기 때문에 단 하나가 존재함을 나타내기 위해 static으로 만들어야
한다

class GamePlayer {
private:
	static const int NUM_TURNS=5;
	int scores[NUM_TURNS];
};

하지만 이것은 NUM_TURNS를 위한 선언(declaration)이지
정의(definition)가 아니라는 점. 구현 파일에 정적 클래스 멤버를
아래와 같이 "필수적으로" 정의해야 한다

const int GamePlayer::NUM_TURNS;
//or
const int GamePlayer::NUM_TURNS = 5;

클래스 내의 정수형 상수에 대해 초기값 지정을 금지하는 컴파일러를 위한
enum hack이 있다. 1995년 이전의 컴파일러가 아니고서야 쓸일은 없다

class GamePlayer {
private:
	enum {NUM_TURNS = 5};

	int scores[NUM_TURNS];
};

