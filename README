* 특정 itemNN.txt없는 것은, (간단해서)굳이 메모할 필요가 없었기 때문

c에서 c++로의 전환
item1. #define보다는 const와 inline을 사용한다
item2. <stdio.h>보다는 <iostream>을 사용한다
item3. malloc과 free보다는 new, delete를 사용한다
item4. c++스타일의 주석을 지향한다.

메모리관리
item5. new와 delete사용시 동일한 형식을 이용한다.
item6. 소멸자에서 포인터 멤버에 대해 delete를 이용한다.
item7. 메모리가 모자랄 경우에 대비한다.
item8. operator new와 operator delete작성시 관례를 따른다
item9. new 의 정상 형식을 감추지 않는다.
item10. operator new를 작성한다면, operator delete도 작성한다

생성자, 소멸자, 그리고 치환 연산자
item11. 동적으로 할당되는 메모리를 갖는 클래스를 위해서는 복사생성자와 치환 연산자를 선언하라.
item12. 생성자에서 치환보다는 초기화를 사용한다.
item13. 클래스에 선언되 순서에 따라 멤버 초기화 리스트에 멤버들을 나열한다
item14. 베이스 클래스에서 소멸자는 가상 함수로 선언해야 한다.
item15. operator=이 *this에 대한 레퍼런스(reference)를 리턴(return)하도록 한다
item16. operator=에서 모든 데이터 멤버들로의 치환을 수행한다
item17. operator=에서 재귀치환을 검사

클래스와 함수: 설계 및 선언
item18. 최소한 완전한 클래스 인터페이스를 추구한다
item19. 멤버 함수, 비멤버 함수 및 프렌드 함수를 구별한다
item20. 데이터 멤버를 공용 인터페이스에 포함시키지 않는다.
item21. 가능한 const를 이용한다.
item22. 값에 의한 호출보다는 레퍼런스에 의한 호출을 선호한다.
item23. 객체 반환시 레퍼런스를 반환하지 않는다.
item24. 함수 오버로딩과 디폴트 인자값 중에서 주의깊게 선언한다.
item25. 포인터나 수치형 타입상의 오버로딩을 피한다
item26. 잠재적 모호성을 경계한다
item27. 의도하지 않은 내부 생성 멤버 함수의 이용을 명시적으로 막는다
item28. 전역 네임스페이스를 분할한다
- 애매모호성, 심볼 충들등을 해결

클래스와 함수: 구현
item29. 내부 데이터에 대한 “핸들”을 리턴하는 것을 피하라
item30. 접근하기 어려운 멤버에 대한 비상수 포인터나 레퍼런스를 리턴하는 멤버함수를 피하라
- private으로 선언하더라도 포인터나 레퍼런스로 반환하면 그것은 이미 공개
멤버나 마찬가지가 되버림.
item31. 지역 객체에 대한 참조나 함수 내에서 new를 이용해 초기화된 포인터를 가리키는 참조를 리턴하지 말라.
item32. 변수 정의는 가능한 뒤로 늦춰라.
- 예외 발생시 쓰지 않는 변수 선언으로 의미없이 소멸하는 비용을 지불하게 될수 있음.
item33. 인라인을 선별적으로 사용하라.
item34. 파일간의 컴파일 의존성(dependency)을 최소화하라.


인스턴스와 객체지향 설계
item35. public계승이 "isa"를 모델링하도록 하라
item36. 인터페이스 계승과 구현 계승의 차이점을 이해하라.
item37. 계승된 비가상 함수를 재정의하지 않도록 한다.
item38. 계승된 기본 인자값을 재정의하지 않도록 한다.
item39. 계층도의 아래쪽 클래스로 다운캐스트 하지 않도록 한다.
item40. 레이어링을 통해 “가지고있는것”과 “사용하여구현된”것을 모델링하도록 한다.
item41. 계승과 템플릿과의 차이점을 이해한다.
item42. private계승을 바르게 사용하라.
item43. 다중 계승을 바르게 사용하도록 하라.
item44. 의미하는 바를 표현하도록 하라: 자신이 표현한 것의 의미를 이해하도록 하라.
- 자신이 표현하는것이 어떤 의미가 되는지 이해하고 있어야만 한다.

미묘한 부분
item45. c++가 은밀하게 어떤 함수를 만들어 주고 호출하는지 이해하기
item46. 실행 시간 에러보다는 컴파일 시간과 링크시간 에러가 좋다.
item47. 비지역 정적(Non-local static) 객체는 사용되기 전에 초기화 되도록 해야 한다
item48. 컴파일러의 경고(warning)에 주의를 기울여라.
item49. 표준 라이브러리를 잘 알아두어라.
item50. c++에 대한 이해를 넓혀라
