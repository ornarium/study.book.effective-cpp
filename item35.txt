item35. public계승이 "isa"를 모델링하도록 하라

"public계승은 isa를 의미한다"

B(Base) -> D(Derived)
D타입의 객체는 또한 B타입의 객체다(그러나 B타입은 D가 아니다)
B는 D에 비해 조금 더 일반적인 개념인 것이고, D는 B보다 조금 더 특화된
개념을 타나냄.

※ protected계승(항목40), private계승(항목 42)은 완전히 다른 얘기.

※ 모든 소프트웨어에 이상적인 단 하나의 설계가 존재할수 는 없다. 부정확한
언어로 인해 설계에 대한 피해를 볼수 있다.

※ Smaltalk나 인터프리트 방식 처럼 가상함수를 상속받아 해당객체에서는
사용하면 안되는 요구사항은 에러를 호출할수 있으며, 런타임시 여기서
Smaltalk는 이러한 에러에 대해 Exception을 내지 않는다. 하지만, C++는
이러한 Smalltalk와는 철학이 다르기 때문에 C++방식대로 컴파일 타임에
에러를 발생시키 도록 하는 것이 옳다(private로 옮거거나, 상속하는 상위
class를 요구사항에 따라 쓸수 없게 만드는 것)

※ 수학에서 사각형 -> 정사각형 이지만, 코드상으로 구현했을때,
사각형에만 적용할수 있는 것과 정사각형에만 적용할수 있는것이
존재한다. 즉, public 계승을 하게 되면 그로 인해 사각형에만 적용할수
있는것이 정사각형에도 영향을 끼치게 되어 둘 사이의 관계를 모델링하는데
public계승이 문제가 생길수 있다는 것.

※ 소프트웨어에 대한 직관이 객체지향 설계로 들어오면서 안맞아질수
있으므로, 객체지향 설계에 대한 직관을 키워야 한다.

※ 프로그래머들이 배워야 할 점은, 코드가 컴파일 되었더라도 옳게
돌아가리라는 보장이 없다는 점.

